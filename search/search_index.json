{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PR Workflow Example This repo allows someone to practice PRs like they would happen with open source projects. It assumes someone knows basic git but wants to learn how to interact with an open source repo. See README_code.md for the regular readme. Features Multiple changes possible: python code, python tests, markdown docs CI/CD pipeline (via Github actions) which runs linters and tests for python and linters for markdown files Some errors get annotations: black, isort, and flake8 violations for python and any spelling errors Aims at scaled trunk based development workflow with a main branch and short-lived feature branches MIT licensed Instruction Fork the repo Clone the repo from your personal fork (using ssh!) Add upstream to your local repo to enable pulling the latest changes from it: git remote add upstream https://github.com/jankatins/pr-workflow-example.git Create a new branch: git checkout -b 'new_feature' Initialize the virtualenv: poetry install and run the code: poetry run python -m calculator '1 + 1' Do changes in the code/text. See the README.md for Python code and docs Coordinate with others to create merge conflicts by changing the same lines in the code in different ways Add a changelog Check your code: first add your changes to the git index git add -u -p and then run poetry run pre-commit run --all-files (fix and repeat until all is fine) Commit git commit -m \"Add new feature\" and push to your fork: git push origin Create the PR in the github web ui: https://github.com/jankatins/pr-workflow-example Add additional changes by either additional commits or changing commits/rebases and force pushes Fix CI/CD failures Fix merge conflicts Wait for the maintainer to get it merged Details Poetry as python package manager mkdocs for documentation + automatic upload of the docs on releases to a github page ( example ) pytest python unit testing + PR annotations via utgwkk/pytest-github-actions-annotate-failures Black and isort python code formatter flake8 and mypy python code checking cspell spell checking including inline annotations markdownlint-cli markdown linting pre-commit for all checks above + some additional ones Changelog for relevant code changes based on \"keep a changelog\" Pull request template for PR checklists Automatic PRs for dependency updates and updates from the cookiecutter template This project was generated using the wolt-python-package-cookiecutter template.","title":"Introduction"},{"location":"#pr-workflow-example","text":"This repo allows someone to practice PRs like they would happen with open source projects. It assumes someone knows basic git but wants to learn how to interact with an open source repo. See README_code.md for the regular readme.","title":"PR Workflow Example"},{"location":"#features","text":"Multiple changes possible: python code, python tests, markdown docs CI/CD pipeline (via Github actions) which runs linters and tests for python and linters for markdown files Some errors get annotations: black, isort, and flake8 violations for python and any spelling errors Aims at scaled trunk based development workflow with a main branch and short-lived feature branches MIT licensed","title":"Features"},{"location":"#instruction","text":"Fork the repo Clone the repo from your personal fork (using ssh!) Add upstream to your local repo to enable pulling the latest changes from it: git remote add upstream https://github.com/jankatins/pr-workflow-example.git Create a new branch: git checkout -b 'new_feature' Initialize the virtualenv: poetry install and run the code: poetry run python -m calculator '1 + 1' Do changes in the code/text. See the README.md for Python code and docs Coordinate with others to create merge conflicts by changing the same lines in the code in different ways Add a changelog Check your code: first add your changes to the git index git add -u -p and then run poetry run pre-commit run --all-files (fix and repeat until all is fine) Commit git commit -m \"Add new feature\" and push to your fork: git push origin Create the PR in the github web ui: https://github.com/jankatins/pr-workflow-example Add additional changes by either additional commits or changing commits/rebases and force pushes Fix CI/CD failures Fix merge conflicts Wait for the maintainer to get it merged","title":"Instruction"},{"location":"#details","text":"Poetry as python package manager mkdocs for documentation + automatic upload of the docs on releases to a github page ( example ) pytest python unit testing + PR annotations via utgwkk/pytest-github-actions-annotate-failures Black and isort python code formatter flake8 and mypy python code checking cspell spell checking including inline annotations markdownlint-cli markdown linting pre-commit for all checks above + some additional ones Changelog for relevant code changes based on \"keep a changelog\" Pull request template for PR checklists Automatic PRs for dependency updates and updates from the cookiecutter template This project was generated using the wolt-python-package-cookiecutter template.","title":"Details"},{"location":"api_docs/","text":"API documentation compute ( problem_input : str ) -> int Compute the result of the input equation. Source code in calculator/__init__.py 5 6 7 8 9 10 def compute ( problem_input : str ) -> int : \"\"\"Compute the result of the input equation.\"\"\" problem_input = problem_input . strip () if problem_input == \"1 + 1\" : return 2 raise ParseException ( f \"Could not parse ' { problem_input } '\" )","title":"API documentation"},{"location":"api_docs/#api-documentation","text":"","title":"API documentation"},{"location":"api_docs/#calculator.compute","text":"Compute the result of the input equation. Source code in calculator/__init__.py 5 6 7 8 9 10 def compute ( problem_input : str ) -> int : \"\"\"Compute the result of the input equation.\"\"\" problem_input = problem_input . strip () if problem_input == \"1 + 1\" : return 2 raise ParseException ( f \"Could not parse ' { problem_input } '\" )","title":"compute()"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased 1.0.1 - 2022-08-22 Fixed the markdown linter now ignores the CHANGELOG.md file (the release workflow creates nice but not quite right markdown) 1.0.0 - 2022-08-22 Added Initial version created by @jankatins Based on woltapp/wolt-python-package-cookiecutter .","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#101-2022-08-22","text":"","title":"1.0.1 - 2022-08-22"},{"location":"changelog/#fixed","text":"the markdown linter now ignores the CHANGELOG.md file (the release workflow creates nice but not quite right markdown)","title":"Fixed"},{"location":"changelog/#100-2022-08-22","text":"","title":"1.0.0 - 2022-08-22"},{"location":"changelog/#added","text":"Initial version created by @jankatins Based on woltapp/wolt-python-package-cookiecutter .","title":"Added"},{"location":"code/","text":"PR Workflow Example Documentation : https://jankatins.github.io/pr-workflow-example Source Code : https://github.com/jankatins/pr-workflow-example A stupid calculator $ python -m calculator 1 + 1 The result of '1 + 1' is: '2' Installation pip install pr-workflow-example Development Clone this repository Requirements: Poetry Python 3.7+ Create a virtual environment and install the dependencies poetry install Activate the virtual environment poetry shell Testing pytest Documentation The documentation is automatically generated from the content of the docs directory and from the docstrings of the public signatures of the source code. The documentation is updated and published as a Github project page automatically as part each release. Releasing Trigger the Draft release workflow (press Run workflow ). This will update the changelog & version and create a GitHub release which is in Draft state. Find the draft release from the GitHub releases and publish it. When a release is published, it'll trigger release workflow which creates PyPI release and deploys updated documentation. Pre-commit Pre-commit hooks run all the auto-formatters (e.g. black , isort ), linters (e.g. mypy , flake8 ), and other quality checks to make sure the changeset is in good shape before a commit/push happens. You can install the hooks with (runs for each commit): pre-commit install Or if you want them to run only for each push: pre-commit install -t pre-push Or if you want e.g. want to run all checks manually for all files: pre-commit run --all-files This project was generated using the wolt-python-package-cookiecutter template.","title":"Code"},{"location":"code/#pr-workflow-example","text":"Documentation : https://jankatins.github.io/pr-workflow-example Source Code : https://github.com/jankatins/pr-workflow-example A stupid calculator $ python -m calculator 1 + 1 The result of '1 + 1' is: '2'","title":"PR Workflow Example"},{"location":"code/#installation","text":"pip install pr-workflow-example","title":"Installation"},{"location":"code/#development","text":"Clone this repository Requirements: Poetry Python 3.7+ Create a virtual environment and install the dependencies poetry install Activate the virtual environment poetry shell","title":"Development"},{"location":"code/#testing","text":"pytest","title":"Testing"},{"location":"code/#documentation","text":"The documentation is automatically generated from the content of the docs directory and from the docstrings of the public signatures of the source code. The documentation is updated and published as a Github project page automatically as part each release.","title":"Documentation"},{"location":"code/#releasing","text":"Trigger the Draft release workflow (press Run workflow ). This will update the changelog & version and create a GitHub release which is in Draft state. Find the draft release from the GitHub releases and publish it. When a release is published, it'll trigger release workflow which creates PyPI release and deploys updated documentation.","title":"Releasing"},{"location":"code/#pre-commit","text":"Pre-commit hooks run all the auto-formatters (e.g. black , isort ), linters (e.g. mypy , flake8 ), and other quality checks to make sure the changeset is in good shape before a commit/push happens. You can install the hooks with (runs for each commit): pre-commit install Or if you want them to run only for each push: pre-commit install -t pre-push Or if you want e.g. want to run all checks manually for all files: pre-commit run --all-files This project was generated using the wolt-python-package-cookiecutter template.","title":"Pre-commit"},{"location":"dummy/","text":"Example Text Just to give something to produce merge conflicts What is Lorem Ipsum? Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. Why do we use it? It is a long-established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose ( injected humour and the like). Where does it come from? Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet.\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham. Where can I get some? There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.","title":"Example Text"},{"location":"dummy/#example-text","text":"Just to give something to produce merge conflicts","title":"Example Text"},{"location":"dummy/#what-is-lorem-ipsum","text":"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.","title":"What is Lorem Ipsum?"},{"location":"dummy/#why-do-we-use-it","text":"It is a long-established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose ( injected humour and the like).","title":"Why do we use it?"},{"location":"dummy/#where-does-it-come-from","text":"Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet.\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.","title":"Where does it come from?"},{"location":"dummy/#where-can-i-get-some","text":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.","title":"Where can I get some?"}]}